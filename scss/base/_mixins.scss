//==================================================//
//============= * * * Box Shadow * * * =============//
//==================================================//

// Utility function to generate individual shadow properties
@function side-shadow($side, $color, $inset: false) {
  $x: 0;
  $y: 0;
  $inset-str: "";

  // Determine the side for the shadow offset
  @if $side == "left" {
    $x: -2px;
  } @else if $side == "right" {
    $x: 2px;
  } @else if $side == "top" {
    $y: -2px;
  } @else if $side == "bottom" {
    $y: 2px;
  }

  @if $inset {
    $inset-str: "inset";
  }

  @return #{$inset-str} #{$x} #{$y} 0 0 $color;
}

// Mixin with parameters for color, active color, inset, and sides
@mixin boxBorder(
  $color: $border-color,
  $activeColor: $active-color,
  $inset: false,
  $sides: left right top bottom
) {
  $shadows: ();
  @each $side in $sides {
    $shadows: append($shadows, side-shadow($side, $color, $inset), comma);
  }

  box-shadow: $shadows;

  &:hover:not([disabled]) {
    $active-shadows: ();
    @each $side in $sides {
      $active-shadows: append(
        $active-shadows,
        side-shadow($side, $activeColor, $inset),
        comma
      );
    }
    box-shadow: $active-shadows;
  }
}

@mixin editBoxBorder {
  &:hover:not([disabled]) {
    @include boxBorder($edit-color, $edit-color);
  }
}

@mixin removeBoxBorder {
  &:hover:not([disabled]) {
    @include boxBorder($remove-color, $remove-color);
  }
}

@mixin inactiveBoxBorder {
  box-shadow: 2px 0px $border-color, -2px 0px $border-color,
    0px -2px $border-color, 0px 2px $border-color;
}

@mixin activeBoxBorder {
  box-shadow: 2px 0px $white, -2px 0px $white, 0px -2px $white, 0px 2px $white;
}

@mixin cancelBorder {
  box-shadow: none;
  &:hover:not([disabled]) {
    box-shadow: none;
  }
}

@mixin doubleThinActiveBorder {
  box-shadow: 1px 0px $black, -1px 0px $black, 0px -1px $black, 0px 1px $black,
    0 0 0 1px $white, 2px 0px $white, -2px 0px $white, 0px -2px $white,
    0px 2px $white;
}

@mixin bubbleBorder($color: $border-color, $activeColor: $active-color) {
  @include boxBorder($color, $activeColor);
  &:after {
    //Speech bubble pointer left
    content: "";
    display: inline-block;
    width: 2px;
    height: 2px;
    position: absolute;
    top: calc(50% - 1px);
    left: -4px;
    background: $color;
    box-shadow: -2px -2px $color, 0px -2px $color, 0px -4px $color;
  }
  &:hover:not([disabled]) {
    &:after {
      background: $activeColor;
      box-shadow: -2px -2px $activeColor, 0px -2px $activeColor,
        0px -4px $activeColor;
    }
  }
}

//==================================================//
//============= * * * Dialog Box * * * =============//
//==================================================//

@mixin dragger {
  .drag-btn {
    position: absolute;
    left: 0;
    top: 0;
    width: 20px;
    height: 20px;
    .grip {
      margin: 5px;
      height: 2px;
      width: 2px;
      background: $border-color;
      box-shadow: 0px 0px $border-color, 4px 0px $border-color,
        0px 4px $border-color, 4px 4px $border-color, 0px 8px $border-color,
        4px 8px $border-color;
    }
    &.locked {
      .grip {
        box-shadow: 2px -2px $border-color, 4px -2px $border-color,
          0px 0px $border-color, 6px 0px $border-color, 0px 2px $border-color,
          6px 2px $border-color, -2px 4px $border-color, 0px 4px $border-color,
          2px 4px $border-color, 4px 4px $border-color, 6px 4px $border-color,
          8px 4px $border-color, -2px 6px $border-color, 0px 6px $border-color,
          4px 6px $border-color, 6px 6px $border-color, 8px 6px $border-color,
          -2px 8px $border-color, 0px 8px $border-color, 4px 8px $border-color,
          6px 8px $border-color, 8px 8px $border-color, -2px 10px $border-color,
          0px 10px $border-color, 2px 10px $border-color, 4px 10px $border-color,
          6px 10px $border-color, 8px 10px $border-color;
      }
    }
  }
  &:hover:not([disabled]) {
    .drag-btn {
      .grip {
        background: $white;
        box-shadow: 0px 0px $white, 4px 0px $white, 0px 4px $white,
          4px 4px $white, 0px 8px $white, 4px 8px $white;
      }
      &.locked {
        .grip {
          box-shadow: 2px -2px $white, 4px -2px $white, 0px 0px $white,
            6px 0px $white, 0px 2px $white, 6px 2px $white, -2px 4px $white,
            0px 4px $white, 2px 4px $white, 4px 4px $white, 6px 4px $white,
            8px 4px $white, -2px 6px $white, 0px 6px $white, 4px 6px $white,
            6px 6px $white, 8px 6px $white, -2px 8px $white, 0px 8px $white,
            4px 8px $white, 6px 8px $white, 8px 8px $white, -2px 10px $white,
            0px 10px $white, 2px 10px $white, 4px 10px $white, 6px 10px $white,
            8px 10px $white;
        }
      }
    }
  }
}

@mixin collapseArrow {
  position: absolute;
  right: 0;
  width: 20px;
  height: 20px;
  margin: 0px;
  display: flex;
  flex-flow: row nowrap;
  cursor: pointer;
  input {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }
  .arrow {
    height: 2px;
    width: 2px;
    box-shadow: 9px 5px $border-color, 7px 7px $border-color,
      9px 7px $border-color, 11px 7px $border-color, 5px 9px $border-color,
      7px 9px $border-color, 9px 9px $border-color, 11px 9px $border-color,
      13px 9px $border-color, 9px 11px $border-color, 9px 13px $border-color;
  }
  input:checked ~ .arrow {
    box-shadow: 9px 5px $border-color, 9px 7px $border-color,
      5px 9px $border-color, 7px 9px $border-color, 9px 9px $border-color,
      11px 9px $border-color, 13px 9px $border-color, 7px 11px $border-color,
      9px 11px $border-color, 11px 11px $border-color, 9px 13px $border-color;
  }
  &:hover {
    .arrow {
      box-shadow: 9px 5px $white, 7px 7px $white, 9px 7px $white,
        11px 7px $white, 5px 9px $white, 7px 9px $white, 9px 9px $white,
        11px 9px $white, 13px 9px $white, 9px 11px $white, 9px 13px $white;
    }
    input:checked ~ .arrow {
      box-shadow: 9px 5px $white, 9px 7px $white, 5px 9px $white, 7px 9px $white,
        9px 9px $white, 11px 9px $white, 13px 9px $white, 7px 11px $white,
        9px 11px $white, 11px 11px $white, 9px 13px $white;
    }
  }
}

@mixin closeX {
  position: absolute;
  right: 0;
  width: 20px;
  height: 20px;
  margin: 0px;
  display: flex;
  flex-flow: row nowrap;
  cursor: pointer;
  input {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }
  .close {
    height: 2px;
    width: 2px;
    box-shadow: 5px 5px $border-color, 13px 5px $border-color,
      7px 7px $border-color, 11px 7px $border-color, 9px 9px $border-color,
      7px 11px $border-color, 11px 11px $border-color, 5px 13px $border-color,
      13px 13px $border-color;
  }
  &:hover {
    .close {
      box-shadow: 5px 5px $white, 13px 5px $white, 7px 7px $white,
        11px 7px $white, 9px 9px $white, 7px 11px $white, 11px 11px $white,
        5px 13px $white, 13px 13px $white;
    }
  }
}

//==================================================//
//================ * * * Misc * * * ================//
//==================================================//

@mixin scrollBar {
  &::-webkit-scrollbar {
    width: 10px;
  }
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  &::-webkit-scrollbar-thumb {
    background: $border-color;
    background-clip: content-box;
    border: 2px solid transparent;
    &:hover {
      background: white;
      background-clip: content-box;
    }
  }
}

//==================================================//
//============ * * * Marching Ants * * * ===========//
//==================================================//

@mixin marching-ants-init($ant-size, $ant-width, $speed, $id) {
  padding: 5px + $ant-width;
  margin: 20px;
  background-size: $ant-size $ant-width, $ant-size $ant-width,
    $ant-width $ant-size, $ant-width $ant-size;
  background-position: 0 0, 0 100%, 0 0, 100% 0;
  background-repeat: repeat-x, repeat-x, repeat-y, repeat-y;
  animation: marching-ants-#{$id} $speed;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-play-state: paused;
  &.marching {
    animation-play-state: running;
  }
  &.reverse {
    animation-direction: reverse;
  }
}
@mixin marching-ants-color($a, $b) {
  background-image: linear-gradient(to right, $a 50%, $b 50%),
    linear-gradient(to right, $a 50%, $b 50%),
    linear-gradient(to bottom, $a 50%, $b 50%),
    linear-gradient(to bottom, $a 50%, $b 50%);
}

@mixin marching-ants-animation($ant-size, $id) {
  @keyframes marching-ants-#{$id} {
    0% {
      background-position: 0 0, 0 100%, 0 0, 100% 0;
    }
    100% {
      background-position: 2 * $ant-size 0, -2 * $ant-size 100%,
        0 -2 * $ant-size, 100% 2 * $ant-size;
    }
  }
}

.marching-ants {
  @include marching-ants-init(10px, 1px, 4s, 1);
  @include marching-ants-color($white, $black);
}

@include marching-ants-animation(10px, 1);
